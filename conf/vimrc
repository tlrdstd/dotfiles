" When vimrc is edited, reload it
autocmd! bufwritepost .vimrc source ~/.vimrc
autocmd! bufwritepost vimrc source ~/.vimrc

set nocompatible " don't be limited to vi-only settings

let mapleader=' ' " set leader key

" Vundle config
" -------------

filetype off
set rtp+=$DOTFILES/vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'bkad/CamelCaseMotion'
Plugin 'kien/ctrlp.vim'
"Plugin 'haya14busa/incsearch.vim' " investigate later - conflicts with ftplugin
Plugin 'scrooloose/nerdtree'
Plugin 'powerline/fonts'
Plugin 'ervandew/supertab'
Plugin 'vim-syntastic/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'kchmck/vim-coffee-script'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-cucumber'
Plugin 'tpope/vim-dispatch'
Plugin 'easymotion/vim-easymotion'
Plugin 'haya14busa/vim-easyoperator-line'
Plugin 'haya14busa/vim-easyoperator-phrase'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-haml'
Plugin 'plasticboy/vim-markdown'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'osyo-manga/vim-over'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-repeat'
Plugin 'thoughtbot/vim-rspec'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-surround'
Plugin 'maxbrunsfeld/vim-yankstack'

call vundle#end()
filetype plugin indent on

" Plugin configs
" --------------

" easymotion - make highlights stand out against Solarized theme
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionTarget2First ErrorMsg
hi link EasyMotionTarget2Second ErrorMsg
hi link EasyMotionShade Comment

" ctrlp - fuzzy file matching for opening files
let g:ctrlp_cache_dir   = '$HOME/.tmp/ctrlp' " store cache for later reuse
let g:ctrlp_show_hidden = 1
let g:ctrlp_max_files   = 0
let g:ctrlp_max_height  = 25

" Solarized color scheme settings for better visibility
let g:solarized_visibility='low'
colorscheme solarized

" Airline status bar - make it look better
let g:airline_theme='solarized'
let g:airline_powerline_fonts=1

" netrw - force better sorting
let g:netrw_sort_options = "i" " case-insensitive netrw directory listings
" default netrw sort options ... tweak to make more like Bash sorting...
let g:netrw_sort_sequence='[\/]$,\<core\%(\.\d\+\)\=\>,\.h$,\.c$,\.cpp$,\~\=\*$,*,\.o$,\.obj$,\.info$,\.swp$,\.bak$,\~$'
let g:netrw_sort_sequence='[\/]$,\<core\%(\.\d\+\)\=\>,*,\.swp$,\.bak$,\.orig$,\~$'
let g:netrw_sort_sequence='[\/]$,*,\.swp$,\.bak$,\.orig$,\~$'

" syntastic - squash useless/annoying complaints
let g:syntastic_eruby_ruby_quiet_messages = {'regex': 'possibly useless use of a variable in void context'}

" vim-yankstack shortcuts
call yankstack#setup()
map Y y$
map <leader>p <Plug>yankstack_substitute_older_paste
map <leader>P <Plug>yankstack_substitute_newer_paste

" Vim configs
" -----------

" read this file as UTF-8 (special chars in listchars)
scriptencoding utf-8

set antialias                         " gui font is antialias
set autochdir                         " cwd follows current file
set autoindent                        " carryover indent level from previous level
set backspace=indent,eol,start        " backspace over whitespace
set background=dark                   " use dark Solarized theme
set bufhidden=delete                  " close hidden buffers
set cindent                           " use c-style auto-indentation
set cinwords=if,else,while,do,for,switch,case,Module,def,Class " indent after
set colorcolumn=100                   " color the 100th column of text
set cursorline                        " highlight active line
set diffopt+=icase                    " case-insensitive diff
set diffopt+=iwhite                   " ignore whitespace in diff
set encoding=utf-8                    " default file encoding
set equalalways                       " multime windows are created equal size
set expandtab                         " replace <Tab> with spaces
set formatoptions+=r                  " auto-continue comment blocks on Enter
set guifont=Fira\ Code:h12            " use this font in the GUI
set guioptions+=b                     " display horizontal (bottom) scrollbar
set guioptions-=t                     " no tearoff menu entries
set history=1000                      " remember a lot of commands
set hlsearch                          " highlight last used search pattern
set ignorecase                        " ignore case in searches
set incsearch                         " incremental search while typing
set laststatus=2                      " always show vim-airline statusbar
set linebreak                         " line wrap at word endings
set list                              " show invisible whitespace chars
set listchars=extends:>               " displays this char at too-long lines
set listchars+=trail:.,tab:»\ ,eol:¬  " display whitespace as such
if has('gui_macvim')
  set macligatures                    " enable macvim ligature support
endif
set matchpairs=(:),{:},[:],<:>        " valid characters to start/end a highlighted tag
set matchtime=2                       " show matching parens for x tenths of a second
set mousehide                         " hide the mouse when typing
set nobackup                          " no auto-backups (I use git)
set noswapfile                        " no .swp files
set nowrap                            " don't wrap long lines
set nowritebackup                     " no backup before writing
set nojoinspaces                      " do not insert extra whitespace when joining lines
set number                            " display line numbers
set regexpengine=2                    " use newer, faster regex engine (mostly for Ctrl-P speed)
set ruler                             " show the cursor position all the time
set shiftwidth=2                      " auto-indent by this many spaces
set showcmd                           " display incomplete commands
set showmatch                         " show matching braces when selected
set sidescroll=5                      " scroll horizontally by this many columns
set smartcase                         " if a search term has a capital letter, it's case-sensitive
set splitbelow                        " horizontal splits put new window below current
set splitright                        " vertical splits put new window to right of current
set tabstop=2                         " <Tab> looks this many spaces wide
set textwidth=0                       " do not force too-long lines to automatically break into a newline
set undodir=$HOME/.tmp/undodir        " persistent undo
set undofile                          " persistent undo
set visualbell t_vb=                  " disable visual/audible bell
set wildignore+=undodir               " ignore tmp directories when expanding wildcards
set wildmenu                          " command-mode auto-complete
set wildmode=longest:full             " control wildmenu matching
syntax enable


" Command remapping
" -----------------

" camelcasemotion - overwrite w and b with ,w and ,b
map w <Plug>CamelCaseMotion_w
map b <Plug>CamelCaseMotion_b
map e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" Buffer splitting
:noremap ,v :vsp<cr>   " hop to new buffer after splitting vertically
:noremap ,h :split<cr> " hop to new buffer after splitting horizontally

" New lines
map <S-Enter> O<ESC> " inserts new line above current line without going into insert mode
map <Enter> o<ESC>   " inserts new line below current line without going into insert mode

" Ruby editing shortcuts
noremap <leader>bb obinding.pry<esc>
noremap <leader>BB Obinding.pry<esc>

" Prevent recording when trying to quit
map q <nop>

" Fix mistaken W errors when trying to save
cmap W w

" Save shortcuts
nnoremap <leader>s :w<CR>
nnoremap <leader>w :w<CR>

" Quit shortcuts
nnoremap <leader>q :q<CR>
nnoremap <leader>wq :wq<CR>

" Fugitive shortcuts
nnoremap <leader>gst :Gstatus<CR>
nnoremap <leader>gp :Git pull<CR>
nnoremap <leader>gf :Git fetch<CR>
nnoremap <leader>gg :Ggrep -i<Space>

" Git diff-ing
nnoremap <leader>gd :Git diff -w<Space>
nnoremap <leader>gdr :Git review<CR>
nnoremap <leader>gdrf :Git review %<CR>

" Git diff current file
nnoremap <leader>gdf :Git diff -w %<CR>
nnoremap <leader>gdd :Git diff -w<CR>
nnoremap <leader>gdb :Git diff -w<Space>
nnoremap <leader>gdm :Git diff -w o/master..HEAD<CR>
nnoremap <leader>gds :Git diff -w --staged<CR>

" Git checkouts
nnoremap <leader>gc :Git checkout<Space>
nnoremap <leader>gco :Git checkout <Space>
nnoremap <leader>gcm :Git checkout master<CR><CR>
nnoremap <leader>gct :Git checkout test/integration<CR><CR>
nnoremap <leader>gcf :Git checkout %
nnoremap <leader>gcl :Git checkout -<CR><CR>
nnoremap <leader>gc- :Git checkout -<CR><CR>
nnoremap <leader>gcb :Git checkout -b<Space>

" Git rebasing
nnoremap <leader>gr :Git rebase<Space>
nnoremap <leader>gre :Git rebase<Space>
nnoremap <leader>grm :Git rebase o/master
nnoremap <leader>gri :Git rebase -i HEAD~

" Git stashing
nnoremap <leader>gss :Git stash save<Space>
nnoremap <leader>gsp :Git stash pop
nnoremap <leader>gsl :Git stash list<CR>
nnoremap <leader>gsd :Git stash show -p stash@{0}

" Git merging
nnoremap <leader>gm :Git merge --no-ff<Space>
nnoremap <leader>gmm :Git merge --no-ff master<Space>
nnoremap <leader>gml :Git merge --no-ff -<Space>

" Git miscellaneous
nnoremap <leader>gbr :Git branch<CR>
nnoremap <leader>gci :Git ci<CR>
nnoremap <leader>gbl :Gblame<CR>
nnoremap <leader>ga :Git add -p %<CR>
nnoremap <leader>gsh :Git show<Space>
nnoremap <leader>gpush :Git push<Space>
nnoremap <leader>G :Git<Space>

" vim-dispatch commands
" Run rspecs from within vim, via dispatch
let g:rspec_command = "Dispatch rspec {spec}"
map <leader>t :call RunCurrentSpecFile()<CR>
map <leader>s :call RunNearestSpec()<CR>
map <leader>l :call RunLastSpec()<CR>
map <leader>a :call RunAllSpecs()<CR>

" Run cukes from within vim, via dispatch
map <leader>C :Dispatch spring cucumber %<CR>

" fancy vim-over find/replace -- conflicts with something else right now :-(
" Function call depth is higher than 'maxfuncdepth'
function! VisualFindAndReplace()
  :OverCommandLine%s/
endfunction

function! VisualFindAndReplaceWithSelection() range
  :'<,'>OverCommandLine s/
endfunction

nnoremap <leader>fr :call VisualFindAndReplace()<CR>
xnoremap <leader>fr :call VisualFindAndReplaceWithSelection()<CR>

" Make Linux Vim behave more like Windows Vim
source $VIMRUNTIME/mswin.vim

" better tab navigation
imap <C-Space> <Esc>                " go to command mode
nnoremap <C-Right> <C-W>l           " move to right pane
nnoremap <C-Left> <C-W>h            " move to left pane
nnoremap <C-Up> <C-W>k              " move to top pane
nnoremap <C-Down> <C-W>j            " move to bottom pane
nnoremap <C-Tab> :tabnext<CR>       " next tab (overrides mswin.vim)
nnoremap <C-S-Tab> :tabprevious<CR> " previous tab
nmap <C-t> :tabnew<CR>              " new tab

" import user/machine specific tweaks
if filereadable(expand("~/.vimrc_local"))
  autocmd! bufwritepost .vimrc_local source ~/.vimrc_local
  source ~/.vimrc_local
endif
